import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.ArrayList;/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author User
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    private DefaultListModel<String> listModel;
    private DatabaseHandler dbHandler = new DatabaseHandler();
    
    public NewJFrame() {
        initComponents();
        listModel = new DefaultListModel<>();
        listContacts.setModel(listModel);
        loadContacts();
        btnAdd.addActionListener(new AddAction());
        btnEdit.addActionListener(new EditAction());
        btnDelete.addActionListener(new DeleteAction());
        btnImport.addActionListener(new ImportAction());
        btnExport.addActionListener(new ExportAction());
        btnSearch.addActionListener(new SearchAction());
        listContacts.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        listContacts.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) { 
                    displaySelectedContactInfo();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listContacts = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtInfo = new javax.swing.JTextArea();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnImport = new javax.swing.JButton();
        btnExport = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        jLabel1.setText("APLIKASI BUKU ALAMAT");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Cari Kontak :");

        jScrollPane1.setViewportView(listContacts);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Daftar Kontak :");

        txtInfo.setEditable(false);
        txtInfo.setColumns(20);
        txtInfo.setRows(5);
        jScrollPane2.setViewportView(txtInfo);

        btnAdd.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAdd.setText("Tambah");

        btnEdit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnEdit.setText("Edit");

        btnDelete.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDelete.setText("Hapus");

        btnImport.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnImport.setText("Impor dari File");

        btnExport.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnExport.setText("Ekspor ke File");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Detail Kontak :");

        btnSearch.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSearch.setText("Cari");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnImport)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnExport))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane2)
                                .addComponent(txtSearch)
                                .addComponent(jScrollPane1)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(btnAdd)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch)))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                        .addComponent(btnSearch)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnEdit)
                    .addComponent(btnDelete))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnImport)
                    .addComponent(btnExport))
                .addGap(42, 42, 42))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSearchActionPerformed
 private void displaySelectedContactInfo() {
    int selectedIndex = listContacts.getSelectedIndex();
    if (selectedIndex != -1) {
        String selectedContact = listContacts.getSelectedValue(); // Ambil item yang dipilih
        String[] contactParts = selectedContact.split(" - "); // Pisahkan berdasarkan " - "
        
        if (contactParts.length == 2) { // Pastikan formatnya benar
            String name = contactParts[0].trim(); // Ambil nama
            
            // Ambil detail kontak berdasarkan nama
            Contact contact = dbHandler.getContactByName(name); 
            
            // Tampilkan detail kontak di txtInfo
            if (contact != null) {
                txtInfo.setText("Nama: " + contact.getName() + "\n" +
                                "Telepon: " + contact.getPhone() + "\n" +
                                "Email: " + contact.getEmail() + "\n" +
                                "Alamat: " + contact.getAddress());
            } else {
                txtInfo.setText("Kontak tidak ditemukan.");
            }
        }
    } else {
        txtInfo.setText(""); // Kosongkan jika tidak ada yang dipilih
    }
}
    private void loadContacts() {
    listModel.clear();
    ArrayList<Contact> contacts = dbHandler.getAllContacts();
    for (Contact contact : contacts) {
        // Format string yang ingin ditampilkan, contoh hanya nama dan nomor telepon
        listModel.addElement(contact.getName() + " - " + contact.getPhone());
    }
}


    // Action Listeners
class SearchAction implements ActionListener {
    public void actionPerformed(ActionEvent e) {
        String searchText = txtSearch.getText().toLowerCase();
        listModel.clear();
        for (Contact contact : dbHandler.getAllContacts()) {
            if (contact.getName().toLowerCase().contains(searchText)) {
                listModel.addElement(contact.getName() + " - " + contact.getPhone()); // Menampilkan nama dan telepon
            }
        }
    }
}


    class AddAction implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            String name = JOptionPane.showInputDialog("Nama:");
            String phone = JOptionPane.showInputDialog("Telepon:");
            String email = JOptionPane.showInputDialog("Email:");
            String address = JOptionPane.showInputDialog("Alamat:"); // Input address
            if (name != null && phone != null && email != null && address != null) {
                dbHandler.addContact(new Contact(0, name, phone, email, address));
                loadContacts();
            }
        }
    }

    class EditAction implements ActionListener {
    public void actionPerformed(ActionEvent e) {
        int selectedIndex = listContacts.getSelectedIndex();
        if (selectedIndex != -1) {
            String selectedContactString = listModel.getElementAt(selectedIndex);
            String contactName = selectedContactString.split(" - ")[0]; // Ambil nama dari string
            Contact selectedContact = dbHandler.getContactByName(contactName); // Ambil data kontak berdasarkan nama
            if (selectedContact != null) {
                String name = JOptionPane.showInputDialog("Nama:", selectedContact.getName());
                String phone = JOptionPane.showInputDialog("Telepon:", selectedContact.getPhone());
                String email = JOptionPane.showInputDialog("Email:", selectedContact.getEmail());
                String address = JOptionPane.showInputDialog("Alamat:", selectedContact.getAddress());
                if (name != null && phone != null && email != null && address != null) {
                    dbHandler.updateContact(new Contact(selectedContact.getId(), name, phone, email, address));
                    loadContacts();
                }
            }
        }
    }
}


class DeleteAction implements ActionListener {
    public void actionPerformed(ActionEvent e) {
        int selectedIndex = listContacts.getSelectedIndex();
        if (selectedIndex != -1) {
            String selectedContactString = listModel.getElementAt(selectedIndex);
            String contactName = selectedContactString.split(" - ")[0]; // Ambil nama dari string
            Contact contact = dbHandler.getContactByName(contactName);
            if (contact != null) {
                dbHandler.deleteContact(contact.getId());
                loadContacts();
            }
        }
    }
}


   class ImportAction implements ActionListener {
    public void actionPerformed(ActionEvent e) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Pilih File untuk Diimpor");
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    // Anggap data dalam format: nama,telepon,email,alamat
                    String[] parts = line.split(",");
                    if (parts.length == 4) {
                        String name = parts[0].trim();
                        String phone = parts[1].trim();
                        String email = parts[2].trim();
                        String address = parts[3].trim();
                        dbHandler.addContact(new Contact(0, name, phone, email, address));
                    }
                }
                loadContacts(); // Reload kontak setelah impor
                JOptionPane.showMessageDialog(null, "Data berhasil diimpor!");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Terjadi kesalahan saat mengimpor data.");
            }
        }
    }
}


    class ExportAction implements ActionListener {
    public void actionPerformed(ActionEvent e) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Simpan File Ekspor");
        int returnValue = fileChooser.showSaveDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
                ArrayList<Contact> contacts = dbHandler.getAllContacts();
                for (Contact contact : contacts) {
                    // Menulis kontak ke file dalam format: nama,telepon,email,alamat
                    writer.write(contact.getName() + "," + contact.getPhone() + "," + contact.getEmail() + "," + contact.getAddress());
                    writer.newLine();
                }
                JOptionPane.showMessageDialog(null, "Data berhasil diekspor!");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Terjadi kesalahan saat mengekspor data.");
            }
        }
    }
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> listContacts;
    private javax.swing.JTextArea txtInfo;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
